from langchain_core.prompts import PromptTemplate

class PromptFactory:
    """Class to generate prompts for language model agents."""

    def __init__(self, prompt_parameter, prompt_string) -> None:
        """
        Initialize AgentPromptGenerator.

        Args:
            prompt_parameter (ContentPromptParameter): Prompt parameters.
            prompt_string (str): The prompt string
        """
        self.prompt_parameter = prompt_parameter
        self.prompt_string = prompt_string

    def generate_prompt(self):
        """
        Generate a prompt.

        Returns:
            str: Generated prompt.
        """
        return self.prompt_string
    
    def generate_youtube_prompt(self):
        """
        Generate a prompt.
        
        Returns:
            str: Generated prompt.
        """

        return f"""

        You are an educator who makes syllabus for micro-learning courses WITHOUT THE USE OF A TOOL. You are amazing at this and can read transcripts to get context.
        
        Given the following YouTube transcript, I want you to generate coherent chapters (5-7) for the video based on its content. Keep it technical.

        {self.prompt_parameter.transcript}

        Task: The goal is to get a list of timestamps and chapter names suitable for micro-learning.

        You must make a JSON with the following keys.

        lesson_title: the title for a lesson covering all the concepts in the transcript
        clip_summary: the clip summary should be around two paragraphs and should summarise the entire transcript
        language: the programming language to use; you can infer this on your own
        chapters: In 'chapters', we want the following for each 'chapter': 'title', 'description', 'timestamp', 'type'.
        chapters: timestamp: You must also pick the timestamp from the transcript and MAKE SURE it is used as it is in the transcript.
        chapters: type: For 'type', if it is a Concept, we want 'type' to be 'concept' and if it is an Example, we want the 'type' to be 'example'.
    
        Give me ONLY the JSON structure as the output.
        This is important since the resulting JSON will feed into another agent and needs to be valid.
        You are a part of a larger system and your output being a valid JSON is crucial.
        
        """
                    
    def generate_youtube_chain_prompt(self):
        prompt = f"""
                    You are an educator who makes syllabus for micro-learning courses and does it fast.
                    Given the following YouTube transcript, I want you to generate coherent chapters (5-7) for the video based on its content.
                    Keep it technical.
                    {self.prompt_parameter.transcript}
                    lesson_title: the logical title for a lesson
                    video_id: {self.prompt_parameter.video_id}
                    clip_summary: should be around two paragraphs and should summarise the entire transcript
                    language: the programming language to use; you can infer this on your own
                    chapters: timestamp: You must also pick the timestamp from the transcript and MAKE SURE it is used as it is in the transcript.
                    chapters: type: For 'type', if it is a Concept, we want 'type' to be 'concept' and if it is an Example, we want the 'type' to be 'example'.
                    Give me ONLY the JSON structure as the output.
                    This is important since the resulting JSON will feed into another agent and needs to be valid.
                    You are a part of a larger system and your output being a valid JSON is crucial.
                    """
        
        prompt = prompt + """
                {chat_history}
                Human: {human_input}
                Chatbot:
                """
        prompt = PromptTemplate(
            input_variables=["chat_history", "human_input"],
            template=prompt
        )
                
        return prompt
    
    def generate_youtube_chapter_chain_prompt(self):
        prompt = f"""
                    For the given video_id {self.prompt_parameter.video_id}, use the chapters generated by you and the transcript below to write chapter descriptions.
                    {self.prompt_parameter.chapters}
                    Below are the keys I need:
                    video_id: video id here
                    chapters: Now, a key for chapters which will be a list as previously but will have the following.
                    chapters: id: use the existing numeric ids for chapters.
                    chapters: title: Here, the title from the generated chapters will be placed
                    chapters: description: The description should be about paragraph length.
                    You are a part of a larger system and your output being a valid JSON is crucial.
                    """
        
        prompt = prompt + """
                {chat_history}
                Human: {human_input}
                Chatbot:
                """
        prompt = PromptTemplate(
            input_variables=["chat_history", "human_input"],
            template=prompt
        )
                
        return prompt
    
    def generate_youtube_context_prompt(self):
        """
        Generate a prompt.
        
        Returns:
            str: Generated prompt.
        """

        return f"""

        Tool to be used? No.

        You are a robot configured with a single purpose: to determine if a given transcript exclusively describes a tutorial on the following topics:
        Topics: computer science, coding, programming, web, mobile, game development, data analysis, cloud services, modelling
        You may have to infer context sometimes and the words may not be directly mentioned.
        It cannot be an informative video, music video or anything that is not directly a tutorial.
        Your purpose is to aide an educator who makes syllabus so your output is crucial.
        Upon analysis, the robot should output either 1 (TRUE) or 0 (FALSE) to signify the validity of the transcript within the specified domains.

        Transcript for evaluation: {self.prompt_parameter.transcript}

        Output: Provide a single integer (1 for TRUE, 0 for FALSE) only. This format is crucial as it will directly influence subsequent if-else conditions within the larger system.

        What is your analysis to the evaluation? Give me the boolean output like a robot.
        
        """
    
    def generate_content_prompt(self):
        """
        Generate a prompt.

        Returns:
            str: Generated prompt.
        """
        return f"""
        (Think in the context of computer science, coding, programming & technology).
        
        Explain {self.prompt_parameter.topic} to me and return a JSON with the following labels:

        Topic: I want you to simply write the topic here.

        Language: Just the name of the language here in full. For example, JS becomes JavaScript. We want the official, full name always

        Content: I want you to first use the search to narrow down the framework or language yourself.
        Give this info to me in {self.prompt_parameter.paragraphs} paragraphs with {self.prompt_parameter.lines_per_paragraph} lines each.
        If you find yourself reading the same explanation more than once, feel free to move to the next step.
        Don't be afraid to be detailed.

        Code: Also, give me a code example to learn. When giving a code example, make sure to give me the code and not a reference.

        Analogy: If a coding example is not possible, give me an analogy which will make the topic easier to understand.

        Sources: Also, I want the {self.prompt_parameter.sources} sources (webpages you have used). I would prefer official documentation. These should have 'webpage name (url)'
        In the JSON structure, each Source should have an array with the keys 'title' and the 'link'.

        Youtube: Also, I want {self.prompt_parameter.youtube_links} number of Youtube links for this as well.
        In the JSON structure, each YouTube link should have an array with the keys 'title' and the 'link'.
        MAKE SURE the YouTube link is working and not a placeholder or some other random problem.
        
        PLEASE MAKE SURE YOU DO NOT MESS UP THE LINKS AND TITLES FOR both Sources & YouTube. We need them in proper format.

        The above list of headings, should be the format of the response. Generate the JSON response where each heading is the key and their required output is the content in the JSON file, the content of the keys should be strings written using markdown instructions.
        
        """

    def generate_mcq_assessmemt_prompt(self):
        prompt = f"""
                    REMEMBER TO NOT LOOK FOR A TOOL; YOU ARE CAPABLE OF THIS TASK WITHOUT A TOOL!
                    You are a professor of {self.prompt_parameter.topic}, and you are responsible for generating unique Easy, Medium ,or Hard level multiple choice problems, level will be mentioned below.

                    Generate a multiple choice questions applicable to language/framework mentioned below.
                    The Task should be independent and solvable on it's own. 

                    language: {self.prompt_parameter.language_type}
                    level: {self.prompt_parameter.question_level}

                    Also, find attach the summary of the topic, and generate questions with context to the topic title and the summary provided below, you can also use your knowledge base to generate unique questions. 
                    
                    summary: {self.prompt_parameter.summary}

                    The structure of the response should be of the form: 

                    task: This should be the question that we have to answer by choosing one of the four options. Since MCQs are simpler, these questions can be theoretical concepts or one-liner coding 'what is the output' questions.
                    Make sure you provide a variety of questions.

                    multiple_choice: We need 4 options here. This should contain the dictionary where each key is a, b, c, d and has the possible answers where out of all only one is correct.

                    correct_answer: This should contain the correct answer's key out of the provided possible answers in the above tag.

                    The above list of headings, should be the format of the response. Generate the JSON response where each heading is the key and their required output is the content in the JSON file.
                    Make sure you always provide a JSON-like structure for the chapters."""
                    
        prompt = prompt + """
                {chat_history}
                Human: {human_input}
                Chatbot:
                """
        prompt = PromptTemplate(
            input_variables=["chat_history", "human_input"], template=prompt
        )
                
        return prompt
    
    def generate_code_assessmemt_prompt(self):
        prompt = f"""
                    REMEMBER TO NOT LOOK FOR A TOOL; YOU ARE CAPABLE OF THIS TASK WITHOUT A TOOL!
                    You are a professor of {self.prompt_parameter.topic}, and you are responsible for generating unique Easy, Medium ,or Hard level programming problems, level will be mentioned below.,
                    Generate a DSA coding task/assignment applicable to language/framework mentioned below.
                        The Task should be independent and solvable on it's own. 

                        language: {self.prompt_parameter.language_type}
                        level: {self.prompt_parameter.question_level}

                        Also, find attach the summary of the topic, and generate problems with context to the topic title and the summary provided below. 
                        
                        summary: {self.prompt_parameter.summary}

                        The structure of the response should be of the form: 

                        task: This should contain the problem statement, and should be a detailed explanation of the requirement of the programming problem.

                        function_signature: The response should also consist of function signature in which the user will do the implementation.

                        examples: The response should also consist of minimum of three examples to provide the user with the type of input required, and output expected
                                and should also explain how the output is achieved giving the hint of the implementation of the problem.
                                The Examples should contain following headings: ['Input', 'Output', 'Explanation'].

                        constraints: The response should also consist the set of constraints applicable on the problem.

                        sample_solution: Provide a working solution for the generated task that follows coding best practices. 
                                        The solution should be implemented in the specified language/framework. 

                        unit_tests: Generate five unit tests for the generated task in the {self.prompt_parameter.language_type} programming language using tesing techniques from the language. 
                                            These tests should ensure correctness and reliability of the solution. 
                                            The unit tests generation should contain one single function in the language under the heading.

                        The above list of headings, should be the format of the response. Generate the JSON response where each heading is the key and their required output is the content in the JSON file, the content of the keys should be strings written using markdown instructions.
                        Make sure you always provide a JSON-like structure for the chapters.
                """
                    
        prompt = prompt + """
                {chat_history}
                Human: {human_input}
                Chatbot:
                """
        prompt = PromptTemplate(
            input_variables=["chat_history", "human_input"], template=prompt
        )
                
        return prompt